#include <stdio.h>                             		/* std i/o library           */
#include <time.h>                              		/* library for delay()       */
#include <windows.h>    
#include <conio.h>                                 	/* needed for kbhit()/getch()  */
#include <Windows.h>
#include <Mmsystem.h>
#include <stdlib.h>

#define MAXSONG 11

/* ***************** THE ABOVE INCLUDES MUST REMAIN *********************** */
/* ************************************************************************ */

/* ADD ALL THE FUNCTION INTRODUCTIONS HERE    */
int banner_string(char chartype, int frame_width, int border_width, char disp_string[50]);
int banner_spaces(char chartype, int frame_width, int border_width, int space_count);
int banner_topbot(char chartype, int frame_width, int border_width);
int putchars(char chartype, int numchars);
int string_len(char instring[50]);
int banner_filled(char chartype, int frame_width, int border_width, int frame_height, int string_count, char disp_strings[5][50]);
int progress(char chartype, int numchars, int delay_ms, char prog_string[50]);
int canceler(int delay);
int file_tracker();

/* ************************************************************************ */
/* ************************************************************************ */
/*                                                                          */
/* program: toastman_janik.c                                                */
/* date: 12/09/2022															*/
/* programmer: Lukasz Janik													*/
/*                                                                          */
/* ************************************************************************ */
/* ************************************************************************ */

/* ************************************************************************ */
/* ******************** THE ITEMS BELOW MUST REMAIN *********************** */
#define PORT "COM6"                            /* define the COM port       */
                                               /* remember to check device  */
                                               /* manager for port number   */
#ifdef REAL
   #include "serialdrv.h"                      /* serial port header file   */
   #include "serialdrv.c"                      /* serial port support code  */
   #include "toastdrv.c"                       /* toaster sim functions     */
#else
   #include "serialsim.h"                      /* serial port header file   */
   #include "serialsim.c"                      /* serial port support code  */
   #include "toastsim.c"                       /* toaster sim functions     */
#endif
/* ******************** THE ITEMS ABOVE MUST REMAIN *********************** */
/* ************************************************************************ */
int main(){
																			/* insert clever UTCUI here   */
	char in_input[1] = " "; 												//A place holder for the input
	printf("\nPlease Enter C To Turn On Toaster: \n");						//Asks for a user input
	scanf("%c", &in_input);													//Takes user input and replaces the place holder
	if (in_input[0] == 'C'){												// If user inputted 'C', the toaster would turn on
																			//Play audio when turning on
		int i=0;	//variable
		int delay;	//variable
		int level = 4;														//Set the initial darkness to level 4
		printf("\nDarkness Level = 4\n");									//Tells user the darkness level
		srand(time(NULL));   												//Initialization, should only be called once.
		char songwaves[3][30]={ "COC.wav",									//Song inputs 
								"YeahToastIsolFade.wav", 
								"soL(1).wav"};
		PlaySound(songwaves[0], NULL, SND_FILENAME | SND_ASYNC);			//To play an audio 
		char banner_data[6][50]= {"T-Press to Start Toasting ",    			/* Opening Banner  */
                              "B-Put Toaster into Bagel Mode ", 	        
	                          "D-Put Toaster into Defrost Mode ",           
	                          "R-Put Toaster into Reheat Mode", 
							  "C-To Cancel Toasting  ", 
							  "1-7 Darkness Levels "};
		char  banner_char[4] = {35,   42,   43,   45};
		while(i<11){														//A loop use toaster functions
		fflush(stdout);														
		printf("\n");														//clears screens
		banner_filled(banner_char[0], 70, 3, 13, 6, banner_data);			//prints the banner
		char user_input[1] = " ";											//Place holder the user input
		printf("\nPlease Enter A Command:	");								//Asks for the user input
		scanf("%s", &user_input);											//scans user input
			switch (user_input[0]){											//used to detect user inputs 
				case 'T': 								//Toast function when input T
					printf("you clicked Toast\n");
					if(i==0){							//Toast function in regular mode
						printf("Normal Toast\n");
						toast();						//Calls to toast function
						fflush(stdout);					//Clears the outputs
						printf("Press C to Cancel Toasting\n");
						delay=(700+((level)*400));		//Finds a specific delay for this option
						PlaySound(songwaves[2], NULL, SND_FILENAME | SND_ASYNC); //Plays a song
						canceler(delay);				//Progress bar that can be canceled
						PlaySound(songwaves[1], NULL, SND_FILENAME | SND_ASYNC); //Plays a song
					}
					else if(i==5){						//Toast function in bagel mode
						printf("Bagel Mode\n");
						toast();						//Calls to toast function
						fflush(stdout);					//Clears the outputs
						delay=(1200+((level)*400));
						printf("Press C to Cancel Toasting\n");
						PlaySound(songwaves[2], NULL, SND_FILENAME | SND_ASYNC); //Plays a song
						canceler(delay);
						PlaySound(songwaves[1], NULL, SND_FILENAME | SND_ASYNC); //Plays a song
						printf("\n");					//Clear up screen
					}
					else if (i==10){					//Toast function in defrost mode
						("Defrost Mode\n");
						toast();						//Calls to toast function
						fflush(stdout);					//Clears the outputs
						delay=(1300+((level)*300));
						printf("Press C to Cancel Toasting\n");
						PlaySound(songwaves[2], NULL, SND_FILENAME | SND_ASYNC); //Plays a song
						canceler(delay);
						PlaySound(songwaves[1], NULL, SND_FILENAME | SND_ASYNC); //Plays a song
						printf("\n");					//Clear up screen
					}
					else if (i==7){						//Toast function in reheat mode
						("Reheat Mode\n");
						toast();						//Calls to toast function
						fflush(stdout);					//Clears the outputs
						delay=(600);
						printf("Press C to Cancel Toasting\n");
						PlaySound(songwaves[2], NULL, SND_FILENAME | SND_ASYNC); //Plays a song
						canceler(delay);
						PlaySound(songwaves[1], NULL, SND_FILENAME | SND_ASYNC); //Plays a song
						printf("\n");					//Clear up screen
					}
					file_tracker();
					break;
				case '+':								//Increasing darkness with +
					printf("you clicked Darken\n");
					plus();								//Call to plus function
					level = level+1;					
					if (level != 8){					
						level = level;
					}
					else if (level == 8){
						level = 7;
					}
					printf("\nDarkness Level = %d\n", level);
					break;
				case '-':									//Decreases darkness with -
					printf("you clicked Lighten\n");
					minus();								//Call to minus function
					level = level-1;
					if (level != 0){
						level = level;
					}
					else if (level == 0){
						level = 1;
					}
					printf("\nDarkness Level = %d\n", level);
					break;
				case 'B':		c							//To toggle bagel mode
					printf("you clicked Bagel\n");
					bagel();								//Call to bagel function
					i=i+5;
					if (i != 10){
						i = i;
						printf("Bagel Mode On\n");
					}
					else if (i == 10){
						i = 0;
						printf("Bagel Mode Off\n");
					}
					break;
				case 'D':									//To toggle defrost mode
					printf("you clicked Defrost\n");
					defrost();								//Call to defrost function
					i=i+10;
					if (i != 20){
						i = i;
						printf("Defrost Mode On\n");
					}
					else if (i == 20){
						i = 0;
						printf("Defrost Mode Off\n");
					}
					break;
				case 'R':									//To toggle reheat mode
					printf("you clicked Reheat\n");
					reheat();								//Call to reheat function
					i=i+7;
					if (i != 14){
						i = i;
						printf("Reheat Mode On\n");
					}
					else if (i == 14){
						i = 0;
						printf("Reheat Mode Off\n");
					}
					break;
				case 'X':									//Turn Off Function
					printf("Turn off toaster");
					i=15;
					break;
				default:									//Wrong Input Funtion
					printf("Enter a valid input");
					break;
			}
		}
	}
	else if(in_input[0] != 'C'){							// If user inputted anything but 'C', the toaster 
		printf("-----Wrong Input-----");
	}
    return 0;
}
/* ************************************************************************************ */
/*                                                                                      */
/*   title: banner_filled(char chartype, int frame_width, int border_width,             */
/*                        int frame_height, int string_count, char disp_strings[5][50]) */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              frame_width (int) -   overall width of the frame in characters          */
/*              border_width (int) -  width of the border surrounding the text          */
/*              frame_height (int) -  overall height of the frame in console lines      */
/*              string_count (int) -  number of strings being passed (note: max = 5)    */
/*              disp_strings (char) - string array (note: max sizes)                    */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function uses subfunctions to create a complete banner.  error checking is    */
/*   performed.                                                                         */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 on success, 1 on failure                                          */
/*                                                                                      */
/*   failure rules: 1) frame width must be even                                         */
/*                  2) frame width - (2 x border width) must be > 10                    */
/*                  3) there much be at least one space on each side of a string        */
/*                     before a border character                                        */
/*                                                                                      */
/* ************************************************************************************ */
//Student #1199
int banner_filled(char chartype, int frame_width, int border_width, int frame_height, 
                                               int string_count, char disp_strings[5][50]) {
                                                         /* check for even frame width  */
                                                         /* check for frame/border ratio*/
                                                         /* check for long strings      */
                                                         /* print the banner using      */
														 /* calls to your other         */
														 /* functions                   */
//for loop that will rin through the display thign that will have disp_stringi
int space_count;
space_count = ((frame_height - (string_count+(border_width*2)))/2);
banner_topbot(chartype, frame_width, border_width);
banner_spaces(chartype, frame_width, border_width,  space_count);
for (int i=0; i<string_count; i++){
banner_string(chartype,frame_width, border_width, disp_strings[i]);
}
banner_spaces(chartype, frame_width, border_width,  space_count);
banner_topbot(chartype, frame_width, border_width);
}

int banner_string(char chartype, int frame_width, int border_width, char disp_string[50]) {
                                                         /* check for even frame width  */
                                                         /* check for frame/border ratio*/
                                                         /* check for long string       */
                                                         /* print the banner line using */
														 /* calls to your other         */
														 /* functions and/or printf()   */
	int string_length;
	string_length = string_len(disp_string);
	if (frame_width % 2 != 0 || border_width*2>=10 || string_length>(frame_width-(border_width*2)-2)){
	printf("Error: Frame must be even width or a width greater than or equal to 10\n");
	return 1;
	}
	char space=' ';
	int num_space = (((frame_width-string_length)-(border_width*2))/2);
	for (int j=0; j<1; j++){
		putchars(chartype, border_width);
		putchars(space, num_space);
		printf("%s", disp_string);
		putchars(space, num_space);
		putchars(chartype, border_width);
		printf("\n");
	}
	return 0;
}
int banner_spaces(char chartype, int frame_width, int border_width,  int space_count) {
                                                         /* check for even frame width  */
                                                         /* check for frame/border ratio*/
                                                         /* print the banner lines      */
														 /* using calls to your other   */
														 /* functions and/or printf()   */
	if (frame_width % 2 != 0 || border_width*2>=10){
	printf("Error: Frame must be even width or a width greater than or equal to 10\n");
	return 1;
}
	char space=' ';
	int num_space=(frame_width-(border_width*2));
	for (int j=0; j<space_count; j++){
		putchars(chartype, border_width);
		putchars(space, num_space);
		putchars(chartype, border_width);
		printf("\n");
	}
return 0;													 	
}
/* ************************************************************************************ */
/*                                                                                      */
/*   title: banner_topbot(char chartype, int frame_width, int border_width)             */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              frame_width (int) -   overall width of the frame in characters          */
/*              border_width (int) -  width of the border surrounding the text          */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function generates a multiple banner lines with defined border character.     */
/*   error checking is performed.                                                       */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 on success, 1 on failure                                          */
/*                                                                                      */
/*   failure rules: 1) frame width must be even                                         */
/*                                                                                      */
/* ************************************************************************************ */
//Student #8376
int banner_topbot(char chartype, int frame_width, int border_width){
                                                         /* check for even frame width  */
                                                         /* print the banner lines      */
														 /* using calls to your other   */
														 /* functions and/or printf()   */
if (frame_width % 2 != 0){
	printf("Error: Frame must have an even width\n");
	return 1;
}
	for (int j=0; j<border_width; j++){
		putchars(chartype, frame_width);
		printf("\n");
	}
return 0;
}
/* ************************************************************************************ */
/*                                                                                      */
/*   title: putchars(char chartype, int numchars)                                       */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              numchars (int) -      number of characters to be printed                */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function repeatedly prints the specified character to the screen. no error    */
/*   checking is performed.                                                             */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 always                                                            */
/*                                                                                      */
/* ************************************************************************************ */
//Student #3672
int putchars(char chartype, int numchars) {
     for(int i = 0; i < numchars; i++) { 							 // print the requested char numchars times
		 printf("%c", chartype); 
	 }
	return 0;
}
int string_len(char instring[50]) {
	int i=0;                                            
    for(i=0; instring[i]!=0; i++); 									 /* length routine.  no library */		
	return i;             											 /* call!                       */
}
/* ****************************************************************************** */
/* ****************************************************************************** */
/*                                                                                */
/* program: canceler.c                                                            */
/*                                                                                */
/* purpose: this program prints out a progress bar that can be interrupted        */
/*          by a keyhit at any time.                                              */
/*                                                                                */
/* ****************************************************************************** */
/* ****************************************************************************** */
int canceler(int delay) {
	int keyPress;
    char userin=0;
    for (int i=0; i<50; i++) {                     /* print out progress bar      */
		printf("%c", 42); 
		Sleep(delay);
        keyPress = kbhit(); if (keyPress != 0) { userin=getch(); cancel();break; }
		                                        /* if keyhit, grab char, bail  */	
	}
   return 0;                                    /* return 0 on exit            */
} 
int file_tracker(){
   FILE *file_ptr;                           	/*     define file pointer */
   char charCount[3];
   int numCount;

   file_ptr = fopen("trackcn2.txt", "r");    	/*   open file for reading */
   
    if (!file_ptr) {                            /*   check for file err */
       file_ptr = fopen("trackcn2.txt", "w");   /*  open file for write */
       putc(48, file_ptr);                      /*      write char zero */
       putc(48, file_ptr);                      /*      write char zero */
       putc(48, file_ptr);                      /*      write char zero */
       return 1;                                /*     return to system */
    }

   charCount[0] = fgetc(file_ptr);              /*  read file 100s char */
   charCount[1] = fgetc(file_ptr);              /*   read file 10s char */
   charCount[2] = fgetc(file_ptr);              /*    read file 1s char */
   fclose(file_ptr);                            /*           close file */

   /* this calculates the count from three text chars in trackcn2.txt   */
   numCount=(charCount[0]-48)*100+(charCount[1]-48)*10+(charCount[2]-48);
   printf("\n---------------------------------\n");
   printf("\nThis was previously ran %d times", numCount);            /*      display value read */
   numCount++;                               				/*increment value read */
   printf("\nNow it was ran %d times", numCount);           /*  display value to write */
   printf("\n---------------------------------\n");
   file_ptr = fopen("trackcn2.txt", "w");    /*     reopen to overwrite */
   putc(numCount/100+48, file_ptr);          /*     write updated count */
   numCount=numCount-numCount/100*100;       /*       subtract off 100s */
   putc(numCount/10+48, file_ptr);           /*     write updated count */
   numCount=numCount-numCount/10*10;         /*        subtract off 10s */
   putc(numCount+48, file_ptr);              /*     write updated count */
   fclose(file_ptr);                         /*              close file */
   return 0;                                 /*            exit cleanly */
} 
