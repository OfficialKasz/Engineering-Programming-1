#include <stdio.h>
#include <windows.h>                                     /* needed for Sleep() function */

/* ************************************************************************************ */
/*                                                                                      */
/*   title: PP_08.c                                                                     */
/*   programmer:Lukasz Janik                                                            */
/*   date: 11/16/2022                                                                   */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this demonstrates a function banner_filled() and its underlying subfunctions       */
/*                                                                                      */
/*   inputs:  stored data                                                               */
/*   outputs: none (console display)                                                    */
/*                                                                                      */
/*   notes: - see function rules in the function headers                                */
/*          - main() is separate and unmodified                                         */
/*                                                                                      */
/* ************************************************************************************ */


/* ****************************  function declarations  ******************************* */
/* you will build these functions to make the given main() produce the requested output */
/* you can change the function argument/parameter names here (and below), if you prefer */
/* a different naming convention. you can learn more about these function in the        */
/* function headers below the included main().                                          */
/* ************************************************************************************ */

int banner_string(char chartype, int frame_width, int border_width, char disp_string[50]);
int banner_spaces(char chartype, int frame_width, int border_width, int space_count);
int banner_topbot(char chartype, int frame_width, int border_width);
int putchars(char chartype, int numchars);
int string_len(char instring[50]);
int banner_filled(char chartype, int frame_width, int border_width, int frame_height, int string_count, char disp_strings[5][50]);
int progress(char chartype, int numchars, int delay_ms, char prog_string[50]);


/* ************************************************************************************ */
/*                                                                                      */
/*   main() - exists separately as pp08main.c                                           */
/*                                                                                      */
/*   please see pp08main.c for the proper header and all comments.  you will use main() */
/*   to understand the functions that you are completing.  YOU ARE NOT TO MODIFY main() */
/*   as the grader will be compiling your functions against a grader main().            */
/*                                                                                      */
/* ************************************************************************************ */

#include "pp08main.c"     /* this line must be in your function .c file to include main */


/* ************************************************************************************ */
/*                                                                                      */
/*   title: banner_filled(char chartype, int frame_width, int border_width,             */
/*                        int frame_height, int string_count, char disp_strings[5][50]) */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              frame_width (int) -   overall width of the frame in characters          */
/*              border_width (int) -  width of the border surrounding the text          */
/*              frame_height (int) -  overall height of the frame in console lines      */
/*              string_count (int) -  number of strings being passed (note: max = 5)    */
/*              disp_strings (char) - string array (note: max sizes)                    */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function uses subfunctions to create a complete banner.  error checking is    */
/*   performed.                                                                         */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 on success, 1 on failure                                          */
/*                                                                                      */
/*   failure rules: 1) frame width must be even                                         */
/*                  2) frame width - (2 x border width) must be > 10                    */
/*                  3) there much be at least one space on each side of a string        */
/*                     before a border character                                        */
/*                                                                                      */
/* ************************************************************************************ */

int banner_filled(char chartype, int frame_width, int border_width, int frame_height, int string_count, char disp_strings[5][50]) {											   
                                                         /* check for even frame width  */

                                                         /* check for frame/border ratio*/

                                                         /* check for long strings      */

                                                         /* print the banner using      */
														 /* calls to your other         */
														 /* functions                   */
int frame_border;
frame_border = ((frame_height-string_count-(border_width*2))/2);



banner_topbot(chartype, frame_width, border_width);
banner_spaces(chartype, frame_width, border_width, frame_border);
for (int i=0; i<string_count;i++){
	banner_string(chartype, frame_width, border_width, disp_strings[i]);
}
banner_spaces(chartype, frame_width, border_width, frame_border);
banner_topbot(chartype, frame_width, border_width);



return 0;	
}



/* ************************************************************************************ */
/*                                                                                      */
/*   title: banner_string(char chartype, int frame_width, int border_width,             */
/*                        char disp_string[50])                                         */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              frame_width (int) -   overall width of the frame in characters          */
/*              border_width (int) -  width of the border surrounding the text          */
/*              disp_string (char) -  string to be displayed                            */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function generates a single banner line with a string centered between a      */
/*   defined border.  error checking is performed.                                      */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 on success, 1 on failure                                          */
/*                                                                                      */
/*   failure rules: 1) frame width must be even                                         */
/*                  2) frame width - (2 x border width) must be >= 10                   */
/*                  3) there much be at least one space on each side of a string        */
/*                     before a border character                                        */
/*                                                                                      */
/* ************************************************************************************ */

int banner_string(char chartype, int frame_width, int border_width, char disp_string[50]) {

                                                         /* check for even frame width  */

                                                         /* check for frame/border ratio*/

                                                         /* check for long string       */

                                                         /* print the banner line using */
														 /* calls to your other         */
														 /* functions and/or printf()   */
														 
	int string_length;
	string_length = string_len(disp_string);
	if (frame_width % 2 != 0 || border_width*2>=10 || string_length>(frame_width-(border_width*2)-2)){
	printf("Error: Frame must be even width or a width greater than or equal to 10\n");
	return 1;
	}
	char space=' ';
	int num_space = (((frame_width-string_length)-(border_width*2))/2);
	for (int j=0; j<1; j++){
		putchars(chartype, border_width);
		putchars(space, num_space);
		printf("%s", disp_string);
		putchars(space, num_space);
		putchars(chartype, border_width);
		printf("\n");
	}
	
	return 0;			
														 
}


/* ************************************************************************************ */
/*                                                                                      */
/*   title: banner_spaces(char chartype, int frame_width, int border_width,             */
/*                        int space_count)                                              */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              frame_width (int) -   overall width of the frame in characters          */
/*              border_width (int) -  width of the border surrounding the text          */
/*              space_count (int) -   number of border spaces (lines) to be displayed   */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function generates a multiple banner line with a spaces centered between a    */
/*   defined border.  error checking is performed.                                      */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 on success, 1 on failure                                          */
/*                                                                                      */
/*   failure rules: 1) frame width must be even                                         */
/*                  2) frame width - (2 x border width) must be >= 10                   */
/*                                                                                      */
/* ************************************************************************************ */

int banner_spaces(char chartype, int frame_width, int border_width,  int space_count) {

                                                         /* check for even frame width  */

                                                         /* check for frame/border ratio*/

                                                         /* print the banner lines      */
														 /* using calls to your other   */
														 /* functions and/or printf()   */
	if (frame_width % 2 != 0 || border_width*2>=10){
	printf("Error: Frame must be even width or a width greater than or equal to 10\n");
	return 1;
}
	char space=' ';
	int num_space=(frame_width-(border_width*2));
	for (int j=0; j<space_count; j++){
		putchars(chartype, border_width);
		putchars(space, num_space);
		putchars(chartype, border_width);
		printf("\n");
	}
	
return 0;													 
	
}



/* ************************************************************************************ */
/*                                                                                      */
/*   title: banner_topbot(char chartype, int frame_width, int border_width)             */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              frame_width (int) -   overall width of the frame in characters          */
/*              border_width (int) -  width of the border surrounding the text          */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function generates a multiple banner lines with defined border character.     */
/*   error checking is performed.                                                       */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 on success, 1 on failure                                          */
/*                                                                                      */
/*   failure rules: 1) frame width must be even                                         */
/*                                                                                      */
/* ************************************************************************************ */

int banner_topbot(char chartype, int frame_width, int border_width){
                                                         /* check for even frame width  */

                                                         /* print the banner lines      */
														 /* using calls to your other   */
														 /* functions and/or printf()   */
if (frame_width % 2 != 0){
	printf("Error: Frame must be even width\n");
	return 1;
}
	for (int j=0; j<border_width; j++){
		putchars(chartype, frame_width);
		printf("\n");
	}
return 0;
}



/* ************************************************************************************ */
/*                                                                                      */
/*   title: putchars(char chartype, int numchars)                                       */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              numchars (int) -      number of characters to be printed                */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function repeatedly prints the specified character to the screen. no error    */
/*   checking is performed.                                                             */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 always                                                            */
/*                                                                                      */
/* ************************************************************************************ */

int putchars(char chartype, int numchars) {
                                                         /* print the banner chars      */
														 /* using calls to printf()     */
	int i;
	for (i=0; i<numchars; i++){
		printf("%c", chartype);
	}
	return 0;
}



/* ************************************************************************************ */
/*                                                                                      */
/*   title: string_len(char instring[50])                                               */
/*                                                                                      */
/*   arguments: instring (char) -     null terminated string to be evaluated for        */
/*                                    length (note max)                                 */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function calculates and returns the length of a null terminated string.       */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: string length                                                       */
/*                                                                                      */
/* ************************************************************************************ */

int string_len(char instring[50]) {
	int i=0;                                            
    for(i=0; instring[i]!=0; i++); 									 /* length routine.  no library */		
	return i;             											 /* call!                       */
}



/* ************************************************************************************ */
/*                                                                                      */
/*   title: progress(char chartype, int numchars, int delay_ms, char prog_string[50])   */
/*                                                                                      */
/*   arguments: chartype (char) -     ASCII code of character used for border           */
/*              numchars (int) -      number of characters to be printed                */
/*              delay_ms (int) -      millisecond delay for Sleep() library function    */
/*              prog_string(char) -   null terminated string to be embedded in          */
/*                                    progress bar                                      */
/*                                                                                      */
/*   purpose:                                                                           */
/*   this function repeatedly prints the specified character to the screen with a delay */
/*   between each character. if a progress string is provided, it is embedded in the    */
/*   progress bar.  error checking is performed.                                        */
/*                                                                                      */
/*   function (return) type: int                                                        */
/*                                                                                      */
/*   return values: 0 on success, 1 on failure                                          */
/*                                                                                      */
/*   failure rules: 1) progress string must be <= numchars (i.e., it needs to fit)      */
/*                                                                                      */
/*                                                                                      */
/* ************************************************************************************ */

int progress(char chartype, int numchars, int delay_ms, char prog_string[50]) {

                                                         /* check prog_string too long  */

                                                         /* build simple outstring      */

                                                         /* embed prog_string if needed */
	
                                                         /* print out with delay        */
int string_length;
	string_length = string_len(prog_string);
	if (string_length >= numchars){
		printf("Error: The string is longer than the number of characters");
		return 1;
		}
	
	int i;
	int k;
	if (string_length == 0){
		for (i=0; i<=numchars; i++) {
			printf("%c", chartype);
			Sleep(delay_ms);
		}
	}
	else if (string_length != 0){
		k=((numchars-string_length)/2)-1;
		for (i=0; i<=k; i++) {
			printf("%c", chartype);
			Sleep(delay_ms);
			}
		for (i=0; i<=string_length; i++){
			char ch = prog_string[i];
			putchar(ch);
			Sleep(delay_ms);
		}
		for (i=0; i<=k; i++) {
			printf("%c", chartype);
			Sleep(delay_ms);
		}
	}
	return 0;
} 
